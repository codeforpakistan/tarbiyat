# Generated by Django 5.2.4 on 2025-07-19 09:08

import app.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0003_add_domain_verification'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='company',
            name='approved_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='company',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_companies', to='app.officialprofile'),
        ),
        migrations.AddField(
            model_name='company',
            name='registered_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='registered_companies', to='app.mentorprofile'),
        ),
        migrations.AddField(
            model_name='company',
            name='registration_notes',
            field=models.TextField(blank=True, help_text='Notes from government official during review', null=True),
        ),
        migrations.AddField(
            model_name='company',
            name='registration_status',
            field=models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20),
        ),
        migrations.AddField(
            model_name='institute',
            name='approved_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='institute',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_institutes', to='app.officialprofile'),
        ),
        migrations.AddField(
            model_name='institute',
            name='registered_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='registered_institutes', to='app.teacherprofile'),
        ),
        migrations.AddField(
            model_name='institute',
            name='registration_notes',
            field=models.TextField(blank=True, help_text='Notes from government official during review', null=True),
        ),
        migrations.AddField(
            model_name='institute',
            name='registration_status',
            field=models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20),
        ),
        migrations.AddField(
            model_name='mentorprofile',
            name='can_register_organization',
            field=models.BooleanField(default=True, help_text='Whether this mentor can register a new company'),
        ),
        migrations.AddField(
            model_name='mentorprofile',
            name='is_admin_contact',
            field=models.BooleanField(default=False, help_text='Whether this mentor is an administrative contact for their company'),
        ),
        migrations.AddField(
            model_name='officialprofile',
            name='approval_authority_level',
            field=models.CharField(choices=[('local', 'Local Authority'), ('provincial', 'Provincial Authority'), ('federal', 'Federal Authority')], default='local', max_length=20),
        ),
        migrations.AddField(
            model_name='officialprofile',
            name='can_approve_organizations',
            field=models.BooleanField(default=True, help_text='Whether this official can approve organization registrations'),
        ),
        migrations.AddField(
            model_name='teacherprofile',
            name='can_register_organization',
            field=models.BooleanField(default=True, help_text='Whether this teacher can register a new institute'),
        ),
        migrations.AddField(
            model_name='teacherprofile',
            name='is_admin_contact',
            field=models.BooleanField(default=False, help_text='Whether this teacher is an administrative contact for their institute'),
        ),
        migrations.CreateModel(
            name='OrganizationRegistrationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('organization_type', models.CharField(choices=[('company', 'Company'), ('institute', 'Institute')], max_length=10)),
                ('organization_name', models.CharField(max_length=200)),
                ('organization_description', models.TextField()),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.TextField()),
                ('website', models.URLField(blank=True, null=True)),
                ('contact_email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email_domain', models.CharField(help_text='Official email domain to verify', max_length=100)),
                ('registration_certificate', models.FileField(help_text='Upload business/educational registration certificate', upload_to='org_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'png'])])),
                ('authorization_letter', models.FileField(help_text='Authorization letter proving you can represent this organization', upload_to='org_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'png'])])),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('needs_revision', 'Needs Revision')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_company', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.company')),
                ('approved_institute', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.institute')),
                ('requested_by_mentor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.mentorprofile')),
                ('requested_by_teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.teacherprofile')),
                ('requested_by_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_requests', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.officialprofile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
