# Generated by Django 5.2.5 on 2025-08-30 15:53

import app.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_company_id, editable=False, max_length=10, unique=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email_domain', models.CharField(blank=True, help_text='Official email domain (e.g., company.com)', max_length=100, null=True)),
                ('domain_verified', models.BooleanField(default=False, help_text='Whether the email domain has been verified')),
                ('registration_status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('registration_notes', models.TextField(blank=True, help_text='Notes from government official during review', null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='InternshipApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_application_id, editable=False, max_length=14, unique=True)),
                ('cover_letter', models.TextField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('interview_scheduled', 'Interview Scheduled'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], default='pending', max_length=20, null=True)),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewer_notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Internship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('active', 'Active'), ('completed', 'Completed'), ('terminated', 'Terminated'), ('on_hold', 'On Hold')], default='active', max_length=15, null=True)),
                ('final_grade', models.CharField(blank=True, max_length=2, null=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('certificate_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.internshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='InternshipPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_position_id, editable=False, max_length=12, unique=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('requirements', models.TextField(blank=True, null=True)),
                ('skills_required', models.TextField(blank=True, null=True)),
                ('duration', models.CharField(blank=True, choices=[('2', '2 Months'), ('3', '3 Months'), ('4', '4 Months'), ('6', '6 Months')], default='2', max_length=1, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('stipend', models.DecimalField(blank=True, decimal_places=2, help_text='Stipend amount in PKR', max_digits=10, null=True)),
                ('max_students', models.IntegerField(blank=True, default=1, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.company')),
            ],
        ),
        migrations.AddField(
            model_name='internshipapplication',
            name='position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applications', to='app.internshipposition'),
        ),
        migrations.CreateModel(
            name='MentorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('experience_years', models.IntegerField(blank=True, null=True)),
                ('specialization', models.CharField(blank=True, max_length=200, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=15, null=True)),
                ('is_admin_contact', models.BooleanField(default=False, help_text='Whether this mentor is an administrative contact for their company')),
                ('can_register_organization', models.BooleanField(default=True, help_text='Whether this mentor can register a new company')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('scheduled_date', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(blank=True, choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=15, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.internshipapplication')),
                ('interviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.mentorprofile')),
            ],
        ),
        migrations.CreateModel(
            name='InternshipSupervisorEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('technical_skills', models.IntegerField(choices=[(1, 'Does not meet expectations'), (2, 'Inconsistently meets expectations'), (3, 'Consistently meets expectations'), (4, 'Above expectations')], help_text='Technical competency and ability to learn/apply new skills')),
                ('work_quality', models.IntegerField(choices=[(1, 'Does not meet expectations'), (2, 'Inconsistently meets expectations'), (3, 'Consistently meets expectations'), (4, 'Above expectations')], help_text='Quality and accuracy of work, attention to detail')),
                ('problem_solving', models.IntegerField(choices=[(1, 'Does not meet expectations'), (2, 'Inconsistently meets expectations'), (3, 'Consistently meets expectations'), (4, 'Above expectations')], help_text='Ability to analyze problems and find solutions')),
                ('teamwork', models.IntegerField(choices=[(1, 'Does not meet expectations'), (2, 'Inconsistently meets expectations'), (3, 'Consistently meets expectations'), (4, 'Above expectations')], help_text='Collaboration, communication, and interpersonal skills')),
                ('professionalism', models.IntegerField(choices=[(1, 'Does not meet expectations'), (2, 'Inconsistently meets expectations'), (3, 'Consistently meets expectations'), (4, 'Above expectations')], help_text='Punctuality, reliability, and professional conduct')),
                ('performance_benefits', models.TextField(help_text="Describe the ways in which the intern's performance benefited your organization")),
                ('observed_development', models.TextField(help_text="What development have you observed in the student's skills, knowledge, personal and/or professional performance?")),
                ('intern_strengths', models.TextField(help_text="What do you consider to be the intern's strengths?")),
                ('areas_for_improvement', models.TextField(help_text='In what areas does the intern need to improve?')),
                ('intern_rating', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('average', 'Average'), ('poor', 'Poor')], help_text='Overall, how do you rate your experience with this intern?', max_length=10)),
                ('program_rating', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('average', 'Average'), ('poor', 'Poor')], help_text='Overall, how do you rate your experience with this internship program?', max_length=10)),
                ('program_improvement_suggestions', models.TextField(help_text='What are your suggestions for improving the internship program?')),
                ('would_recommend', models.BooleanField(help_text='Based on your experience, would you supervise other interns or recommend the internship program to others?')),
                ('additional_comments', models.TextField(blank=True, help_text='Do you have any other comments that will help the institute and our students?', null=True)),
                ('internship', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervisor_evaluation', to='app.internship')),
                ('mentor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.mentorprofile')),
            ],
            options={
                'verbose_name': 'Internship Supervisor Evaluation',
                'verbose_name_plural': 'Internship Supervisor Evaluations',
            },
        ),
        migrations.AddField(
            model_name='internshipposition',
            name='mentor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.mentorprofile'),
        ),
        migrations.AddField(
            model_name='internship',
            name='mentor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.mentorprofile'),
        ),
        migrations.AddField(
            model_name='company',
            name='registered_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='registered_companies', to='app.mentorprofile'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('notification_type', models.CharField(blank=True, choices=[('application_status', 'Application Status Update'), ('interview_scheduled', 'Interview Scheduled'), ('progress_reminder', 'Progress Report Reminder'), ('internship_completed', 'Internship Completed'), ('general', 'General Notification')], max_length=20, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OfficialProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=15, null=True)),
                ('can_approve_organizations', models.BooleanField(default=True, help_text='Whether this official can approve organization registrations')),
                ('approval_authority_level', models.CharField(choices=[('local', 'Local Authority'), ('provincial', 'Provincial Authority'), ('federal', 'Federal Authority')], default='local', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='official_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_institute_id, editable=False, max_length=10, unique=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=15, null=True)),
                ('email_domain', models.CharField(blank=True, help_text='Official email domain (e.g., university.edu.pk)', max_length=100, null=True)),
                ('domain_verified', models.BooleanField(default=False, help_text='Whether the email domain has been verified')),
                ('registration_status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('registration_notes', models.TextField(blank=True, help_text='Notes from government official during review', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('district', models.CharField(blank=True, choices=[('Abbottabad', 'Abbottabad'), ('Bajaur', 'Bajaur'), ('Bannu', 'Bannu'), ('Battagram', 'Battagram'), ('Bunner', 'Bunner'), ('Charsadda', 'Charsadda'), ('D.I.Khan', 'D.I.Khan'), ('Dir Lower', 'Dir Lower'), ('Dir Upper', 'Dir Upper'), ('Hangu', 'Hangu'), ('Haripur', 'Haripur'), ('Karak', 'Karak'), ('Khyber', 'Khyber'), ('Kohat', 'Kohat'), ('Kohistan', 'Kohistan'), ('Kurram', 'Kurram'), ('Lakki Marwat', 'Lakki Marwat'), ('Lower Chitral', 'Lower Chitral'), ('Malakand', 'Malakand'), ('Mansehra', 'Mansehra'), ('Mardan', 'Mardan'), ('Mohmand', 'Mohmand'), ('North Waziristan', 'North Waziristan'), ('Nowshera', 'Nowshera'), ('Orakzai', 'Orakzai'), ('Peshawar', 'Peshawar'), ('Shangla', 'Shangla'), ('South Waziristan', 'South Waziristan'), ('Swabi', 'Swabi'), ('Swat', 'Swat'), ('Tank', 'Tank'), ('Upper Chitral', 'Upper Chitral')], help_text='District where the institute is located', max_length=100, null=True)),
                ('male_students_count', models.PositiveIntegerField(default=0, help_text='Number of male students enrolled')),
                ('female_students_count', models.PositiveIntegerField(default=0, help_text='Number of female students enrolled')),
                ('degree_programs', models.BooleanField(default=False, help_text='Offers degree-level programs')),
                ('postgraduate_programs', models.BooleanField(default=False, help_text='Offers postgraduate programs')),
                ('management_programs', models.BooleanField(default=False, help_text='Offers management programs')),
                ('primary_education_level', models.CharField(blank=True, choices=[('Degree', 'Degree'), ('PostGraduate', 'Post Graduate'), ('Management', 'Management')], help_text='Primary level of education offered', max_length=20, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_institutes', to='app.officialprofile')),
            ],
            options={
                'verbose_name_plural': 'Institutes',
            },
        ),
        migrations.AddField(
            model_name='company',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_companies', to='app.officialprofile'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('payment_type', models.CharField(blank=True, choices=[('student_fee', 'Student Registration Fee'), ('mentor_fee', 'Mentor/Company Fee')], max_length=15, null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount in PKR', max_digits=10, null=True)),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=10, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('period_starting', models.DateField(help_text='Starting date of the reporting period')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('internship', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activity_logs', to='app.internship')),
            ],
            options={
                'verbose_name': 'Student Activity Log',
                'verbose_name_plural': 'Student Activity Logs',
                'ordering': ['-period_starting'],
                'unique_together': {('internship', 'period_starting')},
            },
        ),
        migrations.CreateModel(
            name='StudentActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_description', models.TextField(help_text='Description of the task or activity performed')),
                ('hours_spent', models.DecimalField(decimal_places=1, help_text='Number of hours spent on this activity (max 60 per activity)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)])),
                ('date_performed', models.DateField(help_text='Date when the activity was performed')),
                ('activity_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='app.studentactivitylog')),
            ],
            options={
                'verbose_name': 'Activity Entry',
                'verbose_name_plural': 'Activity Entries',
                'ordering': ['date_performed'],
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('student_id', models.CharField(blank=True, max_length=50, null=True)),
                ('semester_of_study', models.CharField(blank=True, choices=[('4', '4th Semester'), ('5', '5th Semester'), ('6', '6th Semester'), ('7', '7th Semester'), ('8', '8th Semester')], max_length=1, null=True)),
                ('major', models.CharField(blank=True, max_length=100, null=True)),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('skills', models.TextField(blank=True, help_text='List your technical and soft skills', null=True)),
                ('resume', models.FileField(blank=True, help_text='Upload your resume in PDF, DOC, or DOCX format', null=True, upload_to='resumes/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx'])])),
                ('portfolio_url', models.URLField(blank=True, null=True)),
                ('expected_graduation', models.DateField(blank=True, null=True)),
                ('is_available_for_internship', models.BooleanField(default=True)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=15, null=True)),
                ('institute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.institute')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='internshipapplication',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.studentprofile'),
        ),
        migrations.AddField(
            model_name='internship',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.studentprofile'),
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=15, null=True)),
                ('is_admin_contact', models.BooleanField(default=False, help_text='Whether this teacher is an administrative contact for their institute')),
                ('can_register_organization', models.BooleanField(default=True, help_text='Whether this teacher can register a new institute')),
                ('institute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.institute')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentInternshipReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('report_month', models.DateField(help_text='Month and year for this report')),
                ('tasks_performed', models.TextField(help_text='Major duties designated and assignments completed by the student')),
                ('tasks_performed_score', models.IntegerField(help_text='Score for tasks performed (0-10)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('learning_experience', models.TextField(help_text='Skills and knowledge gained or refined through the internship')),
                ('learning_experience_score', models.IntegerField(help_text='Score for learning experience (0-10)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('challenges', models.TextField(help_text='Major challenges faced and how they were tackled')),
                ('challenges_score', models.IntegerField(help_text='Score for handling challenges (0-10)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('additional_comments', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('internship', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_reports', to='app.internship')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.teacherprofile')),
            ],
            options={
                'ordering': ['-report_month'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationRegistrationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('organization_type', models.CharField(choices=[('company', 'Company'), ('institute', 'Institute')], max_length=10)),
                ('organization_name', models.CharField(max_length=200)),
                ('organization_description', models.TextField()),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.TextField()),
                ('website', models.URLField(blank=True, null=True)),
                ('contact_email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email_domain', models.CharField(help_text='Official email domain to verify', max_length=100)),
                ('registration_certificate', models.FileField(help_text='Upload business/educational registration certificate', upload_to='org_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'png'])])),
                ('authorization_letter', models.FileField(help_text='Authorization letter proving you can represent this organization', upload_to='org_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'png'])])),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('needs_revision', 'Needs Revision')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_company', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.company')),
                ('approved_institute', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.institute')),
                ('requested_by_mentor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.mentorprofile')),
                ('requested_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organization_requests', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.officialprofile')),
                ('requested_by_teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.teacherprofile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='internship',
            name='teacher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.teacherprofile'),
        ),
        migrations.AddField(
            model_name='institute',
            name='registered_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='registered_institutes', to='app.teacherprofile'),
        ),
        migrations.CreateModel(
            name='ProgressReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nanoid', models.CharField(db_index=True, default=app.models.generate_nanoid, editable=False, max_length=12, unique=True)),
                ('report_type', models.CharField(blank=True, choices=[('student', 'Student Report'), ('mentor', 'Mentor Report'), ('teacher', 'Teacher Report')], max_length=10, null=True)),
                ('week_number', models.IntegerField(blank=True, null=True)),
                ('tasks_completed', models.TextField(blank=True, null=True)),
                ('learning_outcomes', models.TextField(blank=True, null=True)),
                ('challenges_faced', models.TextField(blank=True, null=True)),
                ('satisfaction_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('student_performance', models.TextField(blank=True, null=True)),
                ('skills_demonstrated', models.TextField(blank=True, null=True)),
                ('areas_for_improvement', models.TextField(blank=True, null=True)),
                ('attendance_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('discussion_notes', models.TextField(blank=True, null=True)),
                ('academic_alignment', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('internship', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='progress_reports', to='app.internship')),
                ('reporter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('internship', 'report_type', 'week_number')},
            },
        ),
        migrations.AddConstraint(
            model_name='internshipapplication',
            constraint=models.UniqueConstraint(condition=models.Q(('status__in', ['pending', 'under_review', 'interview_scheduled', 'approved'])), fields=('student', 'position'), name='unique_active_application'),
        ),
        migrations.AlterUniqueTogether(
            name='studentinternshipreport',
            unique_together={('internship', 'report_month')},
        ),
    ]
